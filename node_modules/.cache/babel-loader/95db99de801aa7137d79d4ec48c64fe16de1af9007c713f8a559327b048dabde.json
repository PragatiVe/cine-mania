{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = '64f9bdeee5357628887f2f71b6314b04';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst fetchResultsPage = async endpoint => {\n  try {\n    const url = `${BASE_URL}${endpoint}&api_key=${API_KEY}`;\n    console.log('Request URL:', url);\n    const response = await axios.get(url);\n    console.log('API Response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching data:', error.response ? error.response.data : error.message);\n    return null;\n  }\n};\nconst fetchMovies = async endpoint => {\n  try {\n    const url = `${BASE_URL}${endpoint}?api_key=${API_KEY}`;\n    console.log('Request URL:', url);\n    const response = await axios.get(url);\n    console.log('API Response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching data:', error.response ? error.response.data : error.message);\n    return null;\n  }\n};\nconst fetchDetails = async endpoint => {\n  const response = await fetch(`https://api.themoviedb.org/3${endpoint}?api_key=${API_KEY}`);\n  const data = await response.json();\n  return data;\n};\nconst fetchLatestMovies = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/movie/now_playing?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching latest movies:', error);\n  }\n};\nconst fetchLatestTVShows = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/tv/on_the_air?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching latest TV shows:', error);\n  }\n};\n\n// const fetchUpcomingMoviesAndTVShows = async () => {\n//   try {\n//     const currentDate = new Date().toISOString().split('T')[0]; \n\n//     const upcomingMoviesResponse = await axios.get(\n//       `${BASE_URL}/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=release_date.asc&release_date.gte=${currentDate}&include_adult=false`\n//     );\n//     const upcomingMovies = upcomingMoviesResponse.data.results;\n\n//     const upcomingTVShowsResponse = await axios.get(\n//       `${BASE_URL}/discover/tv?api_key=${API_KEY}&language=en-US&sort_by=first_air_date.asc&first_air_date.gte=${currentDate}&include_adult=false`\n//     );\n//     const upcomingTVShows = upcomingTVShowsResponse.data.results;\n\n//     const upcomingReleases = [...upcomingMovies, ...upcomingTVShows];\n\n//     return upcomingReleases;\n//   } catch (error) {\n//     console.error('Error fetching upcoming movies and TV shows:', error);\n//     return [];\n//   }\n// };\n\nconst fetchUpcomingMoviesAndTVShows = async () => {\n  try {\n    // Fetch upcoming movies and TV shows separately\n    const upcomingMoviesResponse = await axios.get(`${BASE_URL}/movie/upcoming?api_key=${API_KEY}&language=en-US&page=1`);\n    const upcomingTVShowsResponse = await axios.get(`${BASE_URL}/tv/on_the_air?api_key=${API_KEY}&language=en-US&page=1`);\n\n    // Combine movies and TV shows\n    const upcomingMovies = upcomingMoviesResponse.data.results || [];\n    const upcomingTVShows = upcomingTVShowsResponse.data.results || [];\n\n    // Combine and filter by popularity and genre\n    const combinedResults = [...upcomingMovies, ...upcomingTVShows].filter(item => item.popularity > 10 && (\n    // Example popularity threshold\n    item.genre_ids.includes(28) ||\n    // Action\n    item.genre_ids.includes(35) ||\n    // Comedy\n    item.genre_ids.includes(12)) // Adventure\n    );\n    return combinedResults;\n  } catch (error) {\n    console.error('Error fetching upcoming movies and TV shows:', error);\n    return [];\n  }\n};\nexport { fetchMovies, fetchResultsPage, fetchDetails, fetchLatestMovies, fetchLatestTVShows, fetchUpcomingMoviesAndTVShows };","map":{"version":3,"names":["axios","API_KEY","BASE_URL","fetchResultsPage","endpoint","url","console","log","response","get","data","error","message","fetchMovies","fetchDetails","fetch","json","fetchLatestMovies","results","fetchLatestTVShows","fetchUpcomingMoviesAndTVShows","upcomingMoviesResponse","upcomingTVShowsResponse","upcomingMovies","upcomingTVShows","combinedResults","filter","item","popularity","genre_ids","includes"],"sources":["D:/projects/cine-mania/src/utils/tmdb.js"],"sourcesContent":["\r\nimport axios from 'axios';\r\n\r\nconst API_KEY = '64f9bdeee5357628887f2f71b6314b04';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\nconst fetchResultsPage = async (endpoint) => {\r\n  try {\r\n    const url = `${BASE_URL}${endpoint}&api_key=${API_KEY}`;\r\n    console.log('Request URL:', url);\r\n    const response = await axios.get(url);\r\n    console.log('API Response:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error.response ? error.response.data : error.message);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst fetchMovies = async (endpoint) => {\r\n  try {\r\n    const url = `${BASE_URL}${endpoint}?api_key=${API_KEY}`;\r\n    console.log('Request URL:', url);\r\n    const response = await axios.get(url);\r\n    console.log('API Response:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error.response ? error.response.data : error.message);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst fetchDetails = async (endpoint) => {\r\n  const response = await fetch(`https://api.themoviedb.org/3${endpoint}?api_key=${API_KEY}`);\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n\r\nconst fetchLatestMovies = async () => {\r\n  try {\r\n    const response = await axios.get(\r\n      `${BASE_URL}/movie/now_playing?api_key=${API_KEY}&language=en-US&page=1`\r\n    );\r\n    return response.data.results; \r\n  } catch (error) {\r\n    console.error('Error fetching latest movies:', error);\r\n  }\r\n};\r\n\r\nconst fetchLatestTVShows = async () => {\r\n  try {\r\n    const response = await axios.get(\r\n      `${BASE_URL}/tv/on_the_air?api_key=${API_KEY}&language=en-US&page=1`\r\n    );\r\n    return response.data.results;\r\n  } catch (error) {\r\n    console.error('Error fetching latest TV shows:', error);\r\n  }\r\n};\r\n\r\n// const fetchUpcomingMoviesAndTVShows = async () => {\r\n//   try {\r\n//     const currentDate = new Date().toISOString().split('T')[0]; \r\n\r\n//     const upcomingMoviesResponse = await axios.get(\r\n//       `${BASE_URL}/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=release_date.asc&release_date.gte=${currentDate}&include_adult=false`\r\n//     );\r\n//     const upcomingMovies = upcomingMoviesResponse.data.results;\r\n\r\n//     const upcomingTVShowsResponse = await axios.get(\r\n//       `${BASE_URL}/discover/tv?api_key=${API_KEY}&language=en-US&sort_by=first_air_date.asc&first_air_date.gte=${currentDate}&include_adult=false`\r\n//     );\r\n//     const upcomingTVShows = upcomingTVShowsResponse.data.results;\r\n\r\n//     const upcomingReleases = [...upcomingMovies, ...upcomingTVShows];\r\n\r\n//     return upcomingReleases;\r\n//   } catch (error) {\r\n//     console.error('Error fetching upcoming movies and TV shows:', error);\r\n//     return [];\r\n//   }\r\n// };\r\n\r\nconst fetchUpcomingMoviesAndTVShows = async () => {\r\n  try {\r\n      // Fetch upcoming movies and TV shows separately\r\n      const upcomingMoviesResponse = await axios.get(\r\n          `${BASE_URL}/movie/upcoming?api_key=${API_KEY}&language=en-US&page=1`\r\n      );\r\n\r\n      const upcomingTVShowsResponse = await axios.get(\r\n          `${BASE_URL}/tv/on_the_air?api_key=${API_KEY}&language=en-US&page=1`\r\n      );\r\n\r\n      // Combine movies and TV shows\r\n      const upcomingMovies = upcomingMoviesResponse.data.results || [];\r\n      const upcomingTVShows = upcomingTVShowsResponse.data.results || [];\r\n\r\n      // Combine and filter by popularity and genre\r\n      const combinedResults = [...upcomingMovies, ...upcomingTVShows].filter(item => \r\n          item.popularity > 10 &&  // Example popularity threshold\r\n          (item.genre_ids.includes(28) || // Action\r\n          item.genre_ids.includes(35) || // Comedy\r\n          item.genre_ids.includes(12))   // Adventure\r\n      );\r\n\r\n      return combinedResults;\r\n  } catch (error) {\r\n      console.error('Error fetching upcoming movies and TV shows:', error);\r\n      return [];\r\n  }\r\n};\r\n\r\nexport { fetchMovies, fetchResultsPage, fetchDetails , fetchLatestMovies, fetchLatestTVShows, fetchUpcomingMoviesAndTVShows};\r\n"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,kCAAkC;AAClD,MAAMC,QAAQ,GAAG,8BAA8B;AAE/C,MAAMC,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;EAC3C,IAAI;IACF,MAAMC,GAAG,GAAG,GAAGH,QAAQ,GAAGE,QAAQ,YAAYH,OAAO,EAAE;IACvDK,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,GAAG,CAAC;IAChC,MAAMG,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAACJ,GAAG,CAAC;IACrCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,QAAQ,CAACE,IAAI,CAAC;IAC3C,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAGC,KAAK,CAACC,OAAO,CAAC;IAC3F,OAAO,IAAI;EACb;AACF,CAAC;AAED,MAAMC,WAAW,GAAG,MAAOT,QAAQ,IAAK;EACtC,IAAI;IACF,MAAMC,GAAG,GAAG,GAAGH,QAAQ,GAAGE,QAAQ,YAAYH,OAAO,EAAE;IACvDK,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,GAAG,CAAC;IAChC,MAAMG,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAACJ,GAAG,CAAC;IACrCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,QAAQ,CAACE,IAAI,CAAC;IAC3C,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAGC,KAAK,CAACC,OAAO,CAAC;IAC3F,OAAO,IAAI;EACb;AACF,CAAC;AAED,MAAME,YAAY,GAAG,MAAOV,QAAQ,IAAK;EACvC,MAAMI,QAAQ,GAAG,MAAMO,KAAK,CAAC,+BAA+BX,QAAQ,YAAYH,OAAO,EAAE,CAAC;EAC1F,MAAMS,IAAI,GAAG,MAAMF,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAClC,OAAON,IAAI;AACb,CAAC;AAED,MAAMO,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAC9B,GAAGP,QAAQ,8BAA8BD,OAAO,wBAClD,CAAC;IACD,OAAOO,QAAQ,CAACE,IAAI,CAACQ,OAAO;EAC9B,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;EACvD;AACF,CAAC;AAED,MAAMQ,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAC9B,GAAGP,QAAQ,0BAA0BD,OAAO,wBAC9C,CAAC;IACD,OAAOO,QAAQ,CAACE,IAAI,CAACQ,OAAO;EAC9B,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;EACzD;AACF,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMS,6BAA6B,GAAG,MAAAA,CAAA,KAAY;EAChD,IAAI;IACA;IACA,MAAMC,sBAAsB,GAAG,MAAMrB,KAAK,CAACS,GAAG,CAC1C,GAAGP,QAAQ,2BAA2BD,OAAO,wBACjD,CAAC;IAED,MAAMqB,uBAAuB,GAAG,MAAMtB,KAAK,CAACS,GAAG,CAC3C,GAAGP,QAAQ,0BAA0BD,OAAO,wBAChD,CAAC;;IAED;IACA,MAAMsB,cAAc,GAAGF,sBAAsB,CAACX,IAAI,CAACQ,OAAO,IAAI,EAAE;IAChE,MAAMM,eAAe,GAAGF,uBAAuB,CAACZ,IAAI,CAACQ,OAAO,IAAI,EAAE;;IAElE;IACA,MAAMO,eAAe,GAAG,CAAC,GAAGF,cAAc,EAAE,GAAGC,eAAe,CAAC,CAACE,MAAM,CAACC,IAAI,IACvEA,IAAI,CAACC,UAAU,GAAG,EAAE;IAAK;IACxBD,IAAI,CAACE,SAAS,CAACC,QAAQ,CAAC,EAAE,CAAC;IAAI;IAChCH,IAAI,CAACE,SAAS,CAACC,QAAQ,CAAC,EAAE,CAAC;IAAI;IAC/BH,IAAI,CAACE,SAAS,CAACC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG;IACnC,CAAC;IAED,OAAOL,eAAe;EAC1B,CAAC,CAAC,OAAOd,KAAK,EAAE;IACZL,OAAO,CAACK,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;IACpE,OAAO,EAAE;EACb;AACF,CAAC;AAED,SAASE,WAAW,EAAEV,gBAAgB,EAAEW,YAAY,EAAGG,iBAAiB,EAAEE,kBAAkB,EAAEC,6BAA6B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}