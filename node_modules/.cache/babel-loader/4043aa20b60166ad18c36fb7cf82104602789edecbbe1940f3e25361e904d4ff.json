{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\cine-mania\\\\src\\\\pages\\\\DetailPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovies } from '../utils/tmdb';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DetailPage = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [details, setDetails] = useState(null);\n  useEffect(() => {\n    const getDetails = async () => {\n      const data = await fetchMovies(`/movie/${id}`);\n      setDetails(data);\n    };\n    getDetails();\n  }, [id]);\n  if (!details) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"detail-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: details.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `https://image.tmdb.org/t/p/w500${details.poster_path}`,\n      alt: details.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: details.overview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(DetailPage, \"AQOceyatWJM2i6NNCSBCbSNp+M0=\", false, function () {\n  return [useParams];\n});\n_c = DetailPage;\nexport default DetailPage;\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { fetchMovieDetails } from '../utils/tmdb';\n// import './DetailPage.css';\n\n// const DetailPage = () => {\n//   const { id } = useParams();\n//   const [movie, setMovie] = useState(null);\n\n//   useEffect(() => {\n//     const fetchDetails = async () => {\n//       try {\n//         const data = await fetchMovieDetails(`/movie/${id}`);\n//         setMovie(data);\n//       } catch (error) {\n//         console.error('Error fetching details:', error);\n//       }\n//     };\n\n//     fetchDetails();\n//   }, [id]);\n\n//   if (!movie) return <div>Loading...</div>;\n\n//   return (\n//     <div className=\"detail-page\">\n//       <h1>{movie.title}</h1>\n//       <div className=\"detail-content\">\n//         <img src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} alt={movie.title} />\n//         <div className=\"detail-info\">\n//           <p><strong>Rating:</strong> {movie.vote_average}</p>\n//           <p><strong>Release Date:</strong> {movie.release_date}</p>\n//           <p><strong>Overview:</strong> {movie.overview}</p>\n//           <p><strong>Cast:</strong> {movie.cast.join(', ')}</p>\n//           <p><strong>Where to Watch:</strong> {movie.where_to_watch}</p>\n//           <p><strong>How to Watch:</strong> {movie.how_to_watch}</p>\n//           <p><strong>Fun Facts:</strong> {movie.fun_facts}</p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { fetchMovieDetails, fetchTVShowDetails } from '../utils/tmdb';\n// import './DetailPage.css';\n\n// const DetailPage = () => {\n//   const { id, type } = useParams(); // Extract type and id from the URL\n//   const [item, setItem] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchDetails = async () => {\n//       try {\n//         let data;\n//         if (type === 'movie') {\n//           data = await fetchMovieDetails(id);\n//         } else if (type === 'tv') {\n//           data = await fetchTVShowDetails(id);\n//         } else {\n//           throw new Error('Invalid type');\n//         }\n//         setItem(data);\n//       } catch (error) {\n//         console.error('Error fetching details:', error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchDetails();\n//   }, [id, type]);\n\n//   if (loading) return <div>Loading...</div>;\n//   if (!item) return <div>No data available</div>;\n\n//   return (\n//     <div className=\"detail-page\">\n//       <h1>{item.title || item.name}</h1>\n//       <div className=\"detail-content\">\n//         <img src={`https://image.tmdb.org/t/p/w500${item.poster_path}`} alt={item.title || item.name} />\n//         <div className=\"detail-info\">\n//           <p><strong>Rating:</strong> {item.vote_average}</p>\n//           <p><strong>Release Date:</strong> {item.release_date || item.first_air_date}</p>\n//           <p><strong>Overview:</strong> {item.overview}</p>\n//           <p><strong>Cast:</strong> {/* Display cast information if available */}</p>\n//           <p><strong>Creator/Director:</strong> {/* Display creator/director information if available */}</p>\n//           <p><strong>Genre:</strong> {item.genres.map(genre => genre.name).join(', ')}</p>\n//           <p><strong>Runtime:</strong> {item.runtime || item.episode_run_time.join(', ')} minutes</p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default DetailPage;\nvar _c;\n$RefreshReg$(_c, \"DetailPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","fetchMovies","jsxDEV","_jsxDEV","DetailPage","_s","id","details","setDetails","getDetails","data","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","src","poster_path","alt","overview","_c","$RefreshReg$"],"sources":["D:/projects/cine-mania/src/pages/DetailPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { fetchMovies } from '../utils/tmdb';\r\n\r\nconst DetailPage = () => {\r\n  const { id } = useParams();\r\n  const [details, setDetails] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const getDetails = async () => {\r\n      const data = await fetchMovies(`/movie/${id}`);\r\n      setDetails(data);\r\n    };\r\n\r\n    getDetails();\r\n  }, [id]);\r\n\r\n  if (!details) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <div className=\"detail-page\">\r\n      <h1>{details.title}</h1>\r\n      <img src={`https://image.tmdb.org/t/p/w500${details.poster_path}`} alt={details.title} />\r\n      <p>{details.overview}</p>\r\n      {/* Add more details as needed */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailPage;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import { fetchMovieDetails } from '../utils/tmdb';\r\n// import './DetailPage.css';\r\n\r\n// const DetailPage = () => {\r\n//   const { id } = useParams();\r\n//   const [movie, setMovie] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchDetails = async () => {\r\n//       try {\r\n//         const data = await fetchMovieDetails(`/movie/${id}`);\r\n//         setMovie(data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching details:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchDetails();\r\n//   }, [id]);\r\n\r\n//   if (!movie) return <div>Loading...</div>;\r\n\r\n//   return (\r\n//     <div className=\"detail-page\">\r\n//       <h1>{movie.title}</h1>\r\n//       <div className=\"detail-content\">\r\n//         <img src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} alt={movie.title} />\r\n//         <div className=\"detail-info\">\r\n//           <p><strong>Rating:</strong> {movie.vote_average}</p>\r\n//           <p><strong>Release Date:</strong> {movie.release_date}</p>\r\n//           <p><strong>Overview:</strong> {movie.overview}</p>\r\n//           <p><strong>Cast:</strong> {movie.cast.join(', ')}</p>\r\n//           <p><strong>Where to Watch:</strong> {movie.where_to_watch}</p>\r\n//           <p><strong>How to Watch:</strong> {movie.how_to_watch}</p>\r\n//           <p><strong>Fun Facts:</strong> {movie.fun_facts}</p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import { fetchMovieDetails, fetchTVShowDetails } from '../utils/tmdb';\r\n// import './DetailPage.css';\r\n\r\n// const DetailPage = () => {\r\n//   const { id, type } = useParams(); // Extract type and id from the URL\r\n//   const [item, setItem] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const fetchDetails = async () => {\r\n//       try {\r\n//         let data;\r\n//         if (type === 'movie') {\r\n//           data = await fetchMovieDetails(id);\r\n//         } else if (type === 'tv') {\r\n//           data = await fetchTVShowDetails(id);\r\n//         } else {\r\n//           throw new Error('Invalid type');\r\n//         }\r\n//         setItem(data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching details:', error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchDetails();\r\n//   }, [id, type]);\r\n\r\n//   if (loading) return <div>Loading...</div>;\r\n//   if (!item) return <div>No data available</div>;\r\n\r\n//   return (\r\n//     <div className=\"detail-page\">\r\n//       <h1>{item.title || item.name}</h1>\r\n//       <div className=\"detail-content\">\r\n//         <img src={`https://image.tmdb.org/t/p/w500${item.poster_path}`} alt={item.title || item.name} />\r\n//         <div className=\"detail-info\">\r\n//           <p><strong>Rating:</strong> {item.vote_average}</p>\r\n//           <p><strong>Release Date:</strong> {item.release_date || item.first_air_date}</p>\r\n//           <p><strong>Overview:</strong> {item.overview}</p>\r\n//           <p><strong>Cast:</strong> {/* Display cast information if available */}</p>\r\n//           <p><strong>Creator/Director:</strong> {/* Display creator/director information if available */}</p>\r\n//           <p><strong>Genre:</strong> {item.genres.map(genre => genre.name).join(', ')}</p>\r\n//           <p><strong>Runtime:</strong> {item.runtime || item.episode_run_time.join(', ')} minutes</p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DetailPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAG,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,MAAMC,IAAI,GAAG,MAAMT,WAAW,CAAC,UAAUK,EAAE,EAAE,CAAC;MAC9CE,UAAU,CAACE,IAAI,CAAC;IAClB,CAAC;IAEDD,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACH,EAAE,CAAC,CAAC;EAER,IAAI,CAACC,OAAO,EAAE,oBAAOJ,OAAA;IAAAQ,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE1C,oBACEZ,OAAA;IAAKa,SAAS,EAAC,aAAa;IAAAL,QAAA,gBAC1BR,OAAA;MAAAQ,QAAA,EAAKJ,OAAO,CAACU;IAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACxBZ,OAAA;MAAKe,GAAG,EAAE,kCAAkCX,OAAO,CAACY,WAAW,EAAG;MAACC,GAAG,EAAEb,OAAO,CAACU;IAAM;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzFZ,OAAA;MAAAQ,QAAA,EAAIJ,OAAO,CAACc;IAAQ;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEtB,CAAC;AAEV,CAAC;AAACV,EAAA,CAvBID,UAAU;EAAA,QACCJ,SAAS;AAAA;AAAAsB,EAAA,GADpBlB,UAAU;AAyBhB,eAAeA,UAAU;;AAEzB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}