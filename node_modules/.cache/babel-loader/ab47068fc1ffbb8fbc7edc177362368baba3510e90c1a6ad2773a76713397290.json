{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\cine-mania\\\\src\\\\pages\\\\DetailPage.js\",\n  _s = $RefreshSig$();\n// // DetailPage.js\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { fetchMovieDetails } from '../utils/tmdb';\n\n// const DetailPage = () => {\n//   const { id } = useParams();\n//   const [movieDetails, setMovieDetails] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const getDetails = async () => {\n//       const data = await fetchMovieDetails(id);\n//       setMovieDetails(data);\n//       setLoading(false);\n//     };\n\n//     getDetails();\n//   }, [id]);\n\n//   if (loading) return <p>Loading...</p>;\n\n//   if (!movieDetails) return <p>Error loading details.</p>;\n\n//   return (\n//     <div className=\"detail-page\">\n//       <h1>{movieDetails.title}</h1>\n//       <p>{movieDetails.overview}</p>\n//       <p>Release Date: {movieDetails.release_date}</p>\n//       <p>Rating: {movieDetails.vote_average}</p>\n//       {/* Add more details as needed */}\n//     </div>\n//   );\n// };\n\n// export default DetailPage;\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { fetchMovieDetails,fetchTVShowDetails } from '../utils/tmdb';\n// import './DetailPage.css'; // Assuming you have a CSS file for styling\n\n// const DetailPage = () => {\n//   const { id } = useParams();\n//   const [movieDetails, setMovieDetails] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const getDetails = async () => {\n//       try {\n//         const data = await fetchMovieDetails(id);\n//         if (data && data.status_code) {\n//           // Check for specific error codes from TMDb API\n//           throw new Error(data.status_message);\n//         }\n//         setMovieDetails(data);\n//       } catch (err) {\n//         setError(err.message || 'Error loading details.');\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     getDetails();\n//   }, [id]);\n\n//   if (loading) return <p>Loading...</p>;\n\n//   if (error) return <p>Error: {error}</p>;\n\n//   if (!movieDetails) return <p>No details available.</p>;\n\n//   return (\n//     <div className=\"detail-page\">\n//       {movieDetails.poster_path && (\n//         <img\n//           src={`https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`}\n//           alt={movieDetails.title}\n//           className=\"movie-poster\"\n//         />\n//       )}\n//       <h1>{movieDetails.title}</h1>\n//       <p>{movieDetails.overview}</p>\n//       <p>Release Date: {movieDetails.release_date}</p>\n//       <p>Rating: {movieDetails.vote_average}</p>\n//     </div>\n//   );\n// };\n\n// export default DetailPage;\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieDetails, fetchTVShowDetails } from '../utils/tmdb'; // Adjust if necessary\nimport './DetailPage.css'; // Assuming you have a CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DetailPage = () => {\n  _s();\n  const {\n    id,\n    type\n  } = useParams(); // Include type to differentiate between movies and TV shows\n  const [details, setDetails] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const getDetails = async () => {\n      try {\n        let data;\n        if (type === 'movie') {\n          data = await fetchMovieDetails(id);\n        } else if (type === 'tv') {\n          data = await fetchTVShowDetails(id);\n        } else {\n          throw new Error('Invalid type');\n        }\n        if (data && data.status_code) {\n          throw new Error(data.status_message);\n        }\n        setDetails(data);\n      } catch (err) {\n        setError(err.message || 'Error loading details.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    getDetails();\n  }, [id, type]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 21\n  }, this);\n  if (!details) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No details available.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"detail-page\",\n    children: [details.poster_path && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `https://image.tmdb.org/t/p/w500${details.poster_path}`,\n      alt: details.title || details.name,\n      className: \"media-poster\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: details.title || details.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: details.overview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Release Date: \", details.release_date || details.first_air_date]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Rating: \", details.vote_average]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(DetailPage, \"7CrcRB8iiPVnb1ZKX1qg8XMLbGg=\", false, function () {\n  return [useParams];\n});\n_c = DetailPage;\nexport default DetailPage;\nvar _c;\n$RefreshReg$(_c, \"DetailPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","fetchMovieDetails","fetchTVShowDetails","jsxDEV","_jsxDEV","DetailPage","_s","id","type","details","setDetails","loading","setLoading","error","setError","getDetails","data","Error","status_code","status_message","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","poster_path","src","alt","title","name","overview","release_date","first_air_date","vote_average","_c","$RefreshReg$"],"sources":["D:/projects/cine-mania/src/pages/DetailPage.js"],"sourcesContent":["// // DetailPage.js\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import { fetchMovieDetails } from '../utils/tmdb';\r\n\r\n// const DetailPage = () => {\r\n//   const { id } = useParams();\r\n//   const [movieDetails, setMovieDetails] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const getDetails = async () => {\r\n//       const data = await fetchMovieDetails(id);\r\n//       setMovieDetails(data);\r\n//       setLoading(false);\r\n//     };\r\n\r\n//     getDetails();\r\n//   }, [id]);\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n\r\n//   if (!movieDetails) return <p>Error loading details.</p>;\r\n\r\n//   return (\r\n//     <div className=\"detail-page\">\r\n//       <h1>{movieDetails.title}</h1>\r\n//       <p>{movieDetails.overview}</p>\r\n//       <p>Release Date: {movieDetails.release_date}</p>\r\n//       <p>Rating: {movieDetails.vote_average}</p>\r\n//       {/* Add more details as needed */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DetailPage;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import { fetchMovieDetails,fetchTVShowDetails } from '../utils/tmdb';\r\n// import './DetailPage.css'; // Assuming you have a CSS file for styling\r\n\r\n// const DetailPage = () => {\r\n//   const { id } = useParams();\r\n//   const [movieDetails, setMovieDetails] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getDetails = async () => {\r\n//       try {\r\n//         const data = await fetchMovieDetails(id);\r\n//         if (data && data.status_code) {\r\n//           // Check for specific error codes from TMDb API\r\n//           throw new Error(data.status_message);\r\n//         }\r\n//         setMovieDetails(data);\r\n//       } catch (err) {\r\n//         setError(err.message || 'Error loading details.');\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     getDetails();\r\n//   }, [id]);\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n\r\n//   if (error) return <p>Error: {error}</p>;\r\n\r\n//   if (!movieDetails) return <p>No details available.</p>;\r\n\r\n//   return (\r\n//     <div className=\"detail-page\">\r\n//       {movieDetails.poster_path && (\r\n//         <img\r\n//           src={`https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`}\r\n//           alt={movieDetails.title}\r\n//           className=\"movie-poster\"\r\n//         />\r\n//       )}\r\n//       <h1>{movieDetails.title}</h1>\r\n//       <p>{movieDetails.overview}</p>\r\n//       <p>Release Date: {movieDetails.release_date}</p>\r\n//       <p>Rating: {movieDetails.vote_average}</p>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DetailPage;\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { fetchMovieDetails, fetchTVShowDetails } from '../utils/tmdb'; // Adjust if necessary\r\nimport './DetailPage.css'; // Assuming you have a CSS file for styling\r\n\r\nconst DetailPage = () => {\r\n  const { id, type } = useParams(); // Include type to differentiate between movies and TV shows\r\n  const [details, setDetails] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const getDetails = async () => {\r\n      try {\r\n        let data;\r\n        if (type === 'movie') {\r\n          data = await fetchMovieDetails(id);\r\n        } else if (type === 'tv') {\r\n          data = await fetchTVShowDetails(id);\r\n        } else {\r\n          throw new Error('Invalid type');\r\n        }\r\n        if (data && data.status_code) {\r\n          throw new Error(data.status_message);\r\n        }\r\n        setDetails(data);\r\n      } catch (err) {\r\n        setError(err.message || 'Error loading details.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    getDetails();\r\n  }, [id, type]);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  if (error) return <p>Error: {error}</p>;\r\n\r\n  if (!details) return <p>No details available.</p>;\r\n\r\n  return (\r\n    <div className=\"detail-page\">\r\n      {details.poster_path && (\r\n        <img\r\n          src={`https://image.tmdb.org/t/p/w500${details.poster_path}`}\r\n          alt={details.title || details.name}\r\n          className=\"media-poster\"\r\n        />\r\n      )}\r\n      <h1>{details.title || details.name}</h1>\r\n      <p>{details.overview}</p>\r\n      <p>Release Date: {details.release_date || details.first_air_date}</p>\r\n      <p>Rating: {details.vote_average}</p>\r\n      {/* Add more details as needed */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}