{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\cine-mania\\\\src\\\\pages\\\\DetailPage.js\",\n  _s = $RefreshSig$();\n// // DetailPage.js\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { fetchMovieDetails } from '../utils/tmdb';\n\n// const DetailPage = () => {\n//   const { id } = useParams();\n//   const [movieDetails, setMovieDetails] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const getDetails = async () => {\n//       const data = await fetchMovieDetails(id);\n//       setMovieDetails(data);\n//       setLoading(false);\n//     };\n\n//     getDetails();\n//   }, [id]);\n\n//   if (loading) return <p>Loading...</p>;\n\n//   if (!movieDetails) return <p>Error loading details.</p>;\n\n//   return (\n//     <div className=\"detail-page\">\n//       <h1>{movieDetails.title}</h1>\n//       <p>{movieDetails.overview}</p>\n//       <p>Release Date: {movieDetails.release_date}</p>\n//       <p>Rating: {movieDetails.vote_average}</p>\n//       {/* Add more details as needed */}\n//     </div>\n//   );\n// };\n\n// export default DetailPage;\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieDetails, fetchTVShowDetails } from '../utils/tmdb';\nimport './DetailPage.css'; // Assuming you have a CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DetailPage = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const getDetails = async () => {\n      try {\n        const data = await fetchMovieDetails(id);\n        if (data && data.status_code) {\n          // Check for specific error codes from TMDb API\n          throw new Error(data.status_message);\n        }\n        setMovieDetails(data);\n      } catch (err) {\n        setError(err.message || 'Error loading details.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    getDetails();\n  }, [id]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 21\n  }, this);\n  if (!movieDetails) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No details available.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 29\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"detail-page\",\n    children: [movieDetails.poster_path && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`,\n      alt: movieDetails.title,\n      className: \"movie-poster\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: movieDetails.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: movieDetails.overview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Release Date: \", movieDetails.release_date]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Rating: \", movieDetails.vote_average]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(DetailPage, \"zazFtqsRC5Z0sVziL1AZkH51yq0=\", false, function () {\n  return [useParams];\n});\n_c = DetailPage;\nexport default DetailPage;\nvar _c;\n$RefreshReg$(_c, \"DetailPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","fetchMovieDetails","fetchTVShowDetails","jsxDEV","_jsxDEV","DetailPage","_s","id","movieDetails","setMovieDetails","loading","setLoading","error","setError","getDetails","data","status_code","Error","status_message","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","poster_path","src","alt","title","overview","release_date","vote_average","_c","$RefreshReg$"],"sources":["D:/projects/cine-mania/src/pages/DetailPage.js"],"sourcesContent":["// // DetailPage.js\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import { fetchMovieDetails } from '../utils/tmdb';\r\n\r\n// const DetailPage = () => {\r\n//   const { id } = useParams();\r\n//   const [movieDetails, setMovieDetails] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const getDetails = async () => {\r\n//       const data = await fetchMovieDetails(id);\r\n//       setMovieDetails(data);\r\n//       setLoading(false);\r\n//     };\r\n\r\n//     getDetails();\r\n//   }, [id]);\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n\r\n//   if (!movieDetails) return <p>Error loading details.</p>;\r\n\r\n//   return (\r\n//     <div className=\"detail-page\">\r\n//       <h1>{movieDetails.title}</h1>\r\n//       <p>{movieDetails.overview}</p>\r\n//       <p>Release Date: {movieDetails.release_date}</p>\r\n//       <p>Rating: {movieDetails.vote_average}</p>\r\n//       {/* Add more details as needed */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DetailPage;\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { fetchMovieDetails,fetchTVShowDetails } from '../utils/tmdb';\r\nimport './DetailPage.css'; // Assuming you have a CSS file for styling\r\n\r\nconst DetailPage = () => {\r\n  const { id } = useParams();\r\n  const [movieDetails, setMovieDetails] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const getDetails = async () => {\r\n      try {\r\n        const data = await fetchMovieDetails(id);\r\n        if (data && data.status_code) {\r\n          // Check for specific error codes from TMDb API\r\n          throw new Error(data.status_message);\r\n        }\r\n        setMovieDetails(data);\r\n      } catch (err) {\r\n        setError(err.message || 'Error loading details.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    getDetails();\r\n  }, [id]);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  if (error) return <p>Error: {error}</p>;\r\n\r\n  if (!movieDetails) return <p>No details available.</p>;\r\n\r\n  return (\r\n    <div className=\"detail-page\">\r\n      {movieDetails.poster_path && (\r\n        <img\r\n          src={`https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`}\r\n          alt={movieDetails.title}\r\n          className=\"movie-poster\"\r\n        />\r\n      )}\r\n      <h1>{movieDetails.title}</h1>\r\n      <p>{movieDetails.overview}</p>\r\n      <p>Release Date: {movieDetails.release_date}</p>\r\n      <p>Rating: {movieDetails.vote_average}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}